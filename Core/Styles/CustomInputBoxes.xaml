<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <DataTemplate x:Key="DropDownButtonContentTemplate">
        <Border Background="{StaticResource Basic}" CornerRadius="8" MinHeight="120" MinWidth="200">
            <ContentPresenter/>
        </Border>
    </DataTemplate>
    <DataTemplate x:Key="ButtonSpinnerSpinnerUpContentTemplateMain">
        <Path Fill="{StaticResource Buttons.Green}" Width="12" Stretch="Uniform" RenderOptions.EdgeMode="Aliased" Data="M460-460H260q-8.5 0-14.25-5.76T240-480.03q0-8.51 5.75-14.24T260-500h200v-200q0-8.5 5.76-14.25t14.27-5.75q8.51 0 14.24 5.75T500-700v200h200q8.5 0 14.25 5.76t5.75 14.27q0 8.51-5.75 14.24T700-460H500v200q0 8.5-5.76 14.25T479.97-240q-8.51 0-14.24-5.75T460-260v-200Z" />
    </DataTemplate>
    
    <DataTemplate x:Key="ButtonSpinnerSpinnerDownContentTemplateMain">
        <Path Fill="{StaticResource Buttons.Red}" Width="12" Stretch="Uniform" RenderOptions.EdgeMode="Aliased" Data="M260-460q-8.5 0-14.25-5.76T240-480.03q0-8.51 5.75-14.24T260-500h440q8.5 0 14.25 5.76t5.75 14.27q0 8.51-5.75 14.24T700-460H260Z"/>
    </DataTemplate>
    <Style x:Key="RepeatButtonTextBox" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Cursor" Value="Hand"/>
        <!--<Setter Property="HorizontalAlignment" Value="Center"/>-->
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <!--<Setter Property="VerticalAlignment" Value="Center"/>-->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="2" CornerRadius="2" Background="Transparent" BorderBrush="{StaticResource DarkLight}" BorderThickness="0">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="-5" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <!--<Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource Dark}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Element}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Icon}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource Area}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xctk:MaskedTextBox}">
        <Setter Property="Background" Value="{StaticResource Black}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Element}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MaxHeight" Value="30"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FontFamily" Value="{StaticResource Rubik}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{StaticResource Element}" Focusable="False" Margin="0,0,3,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:MaskedTextBox}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.50"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}"
                    Foreground="{StaticResource Element}"
                    Focusable="False" HorizontalContentAlignment="Center"/>
    </DataTemplate>

    <Style x:Key="WatermarkTextBox" TargetType="{x:Type xctk:WatermarkTextBox}">
        <Setter Property="Background" Value="{StaticResource Black}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Element}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Margin" Value="5"/>
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                                </ScrollViewer>
                                <ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" ContentTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultWatermarkTemplate}}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  IsHitTestVisible="False"
                                  Margin="{TemplateBinding Padding}"
                                  Visibility="Collapsed" />
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOverVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
                        <Border x:Name="FocusVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="False" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="True" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Opacity" Value="1" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WatermarkTextBoxSimple" TargetType="{x:Type xctk:WatermarkTextBox}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Light}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Margin" Value="5"/>
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                                </ScrollViewer>
                                <ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" ContentTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultWatermarkTemplate}}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="False"
                              Margin="{TemplateBinding Padding}"
                              Visibility="Collapsed" />
                            </Grid>
                        </Border>
                        <Border x:Name="MouseOverVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
                        <Border x:Name="FocusVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="False" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="True" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Style x:Name="ButtonSpinnerMain" TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Background" Value="{StaticResource Black}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Element}"/>
        <Setter Property="Foreground" Value="{DynamicResource Light}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SpinnerUpContentTemplate" Value="{StaticResource ButtonSpinnerSpinnerUpContentTemplateMain}" />
        <Setter Property="SpinnerDownContentTemplate" Value="{StaticResource ButtonSpinnerSpinnerDownContentTemplateMain}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                    <Border x:Name="Border" SnapsToDevicePixels="True" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn" Width="*" />
                                <ColumnDefinition x:Name="secondContentColumn" Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="contentPresenter" Cursor="Hand" Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch">
                                <ContentPresenter.ContextMenu>
                                    <ContextMenu Foreground="White">
                                        <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                                        <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                                    </ContextMenu>
                                </ContentPresenter.ContextMenu>
                            </ContentPresenter>

                            <Grid x:Name="gridContent" Grid.Column="1" MinWidth="80" Width="{TemplateBinding SpinnerWidth}" Height="{TemplateBinding SpinnerHeight}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="40"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton x:Name="PART_IncreaseButton" Grid.Column="1" IsTabStop="{TemplateBinding IsTabStop}" Style="{StaticResource RepeatButtonTextBox}" ContentTemplate="{StaticResource ButtonSpinnerSpinnerUpContentTemplateMain}">
                                </RepeatButton>

                                <RepeatButton x:Name="PART_DecreaseButton" Grid.Column="0" Style="{StaticResource RepeatButtonTextBox}" IsTabStop="{TemplateBinding IsTabStop}" ContentTemplate="{StaticResource ButtonSpinnerSpinnerDownContentTemplateMain}" >
                                </RepeatButton>

                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowButtonSpinner" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="gridContent" />
                        </Trigger>
                        <Trigger Property="ShowSpinner" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="gridContent" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger SourceName="PART_IncreaseButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_IncreaseButton" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger SourceName="PART_DecreaseButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_DecreaseButton" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="SpinnerLocation" Value="Left">
                            <Setter TargetName="firstContentColumn" Property="Width" Value="Auto" />
                            <Setter TargetName="secondContentColumn" Property="Width" Value="*" />
                            <Setter TargetName="contentPresenter" Property="Grid.Column" Value="1" />
                            <Setter TargetName="gridContent" Property="Grid.Column" Value="0" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ButtonSpinnerGridTemplate" TargetType="{x:Type xctk:ButtonSpinner}">
        <Border x:Name="Border" SnapsToDevicePixels="True" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="firstContentColumn" Width="*" />
                    <ColumnDefinition x:Name="secondContentColumn" Width="auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="contentPresenter" Cursor="Hand" Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch">
                    <ContentPresenter.ContextMenu>
                        <ContextMenu Foreground="White">
                            <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                            <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                        </ContextMenu>
                    </ContentPresenter.ContextMenu>
                </ContentPresenter>

                <Grid x:Name="gridContent" Grid.Column="1" MinWidth="80" Width="{TemplateBinding SpinnerWidth}" Height="{TemplateBinding SpinnerHeight}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="40"/>
                        <ColumnDefinition Width="40"/>
                    </Grid.ColumnDefinitions>
                    <RepeatButton x:Name="PART_IncreaseButton" Grid.Column="1" IsTabStop="{TemplateBinding IsTabStop}" Style="{StaticResource RepeatButtonTextBox}" ContentTemplate="{StaticResource ButtonSpinnerSpinnerUpContentTemplateMain}">
                    </RepeatButton>

                    <RepeatButton x:Name="PART_DecreaseButton" Grid.Column="0" Style="{StaticResource RepeatButtonTextBox}" IsTabStop="{TemplateBinding IsTabStop}" ContentTemplate="{StaticResource ButtonSpinnerSpinnerDownContentTemplateMain}" >
                    </RepeatButton>

                </Grid>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowButtonSpinner" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="gridContent" />
            </Trigger>
            <Trigger Property="ShowSpinner" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="gridContent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger SourceName="PART_IncreaseButton" Property="IsEnabled" Value="False">
                <Setter TargetName="PART_IncreaseButton" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger SourceName="PART_DecreaseButton" Property="IsEnabled" Value="False">
                <Setter TargetName="PART_DecreaseButton" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="SpinnerLocation" Value="Left">
                <Setter TargetName="firstContentColumn" Property="Width" Value="Auto" />
                <Setter TargetName="secondContentColumn" Property="Width" Value="*" />
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="1" />
                <Setter TargetName="gridContent" Property="Grid.Column" Value="0" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                            <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                            <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.100" To="DodgerBlue" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                            <ThicknessAnimation Duration="0:0:0.100" To="2" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.250" To="#FF3E414B" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderBrush.Color"/>
                            <ThicknessAnimation Duration="0:0:0.250" To="1" Storyboard.TargetName="Border" Storyboard.TargetProperty="BorderThickness"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type xctk:WatermarkTextBox}" BasedOn="{StaticResource WatermarkTextBox}" />
    
    <Style x:Key="NumericUpDown" TargetType="{x:Type xctk:InputBase}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MaxHeight" Value="30"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="FontFamily" Value="{StaticResource Rubik}"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <xctk:ButtonSpinner x:Name="PART_Spinner"
                               IsTabStop="False"
                               HorizontalContentAlignment="Left" Padding="5"
                               VerticalContentAlignment="Center"
                               AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                               ShowSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
                               SpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
                               SpinnerWidth="{Binding ButtonSpinnerWidth, RelativeSource={RelativeSource TemplatedParent}}"
                               SpinnerHeight="{Binding ButtonSpinnerHeight, RelativeSource={RelativeSource TemplatedParent}}" Foreground="White"
                               >
                        <xctk:WatermarkTextBox x:Name="PART_TextBox"
                                    Style="{StaticResource WatermarkTextBoxSimple}"
                                    ContextMenu="{TemplateBinding ContextMenu}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontStretch="{TemplateBinding FontStretch}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsTabStop="True"
                                    MinWidth="20"
                                    AcceptsReturn="False"
                                    Margin="-2"
                                    AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                    AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextWrapping="NoWrap"
                                    TabIndex="{TemplateBinding TabIndex}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                    WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}">
                        </xctk:WatermarkTextBox>
                    </xctk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                            
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NumericUpDownGrid" TargetType="{x:Type xctk:InputBase}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MaxHeight" Value="31"/>
        <Setter Property="Margin" Value="-5,0,-1,0"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="FontFamily" Value="{StaticResource Rubik}"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Foreground="White">
                    <MenuItem Header="Вырезать" Command="ApplicationCommands.Cut"/>
                    <MenuItem Header="Копировать" Command="ApplicationCommands.Copy"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <xctk:ButtonSpinner x:Name="PART_Spinner"
                           IsTabStop="False"
                           HorizontalContentAlignment="Left" Padding="5"
                           VerticalContentAlignment="Center"
                            Template="{StaticResource ButtonSpinnerGridTemplate}"     
                           AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                           ShowSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
                           SpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
                           SpinnerWidth="{Binding ButtonSpinnerWidth, RelativeSource={RelativeSource TemplatedParent}}"
                           SpinnerHeight="{Binding ButtonSpinnerHeight, RelativeSource={RelativeSource TemplatedParent}}" Foreground="White"
                           >
                        <xctk:WatermarkTextBox x:Name="PART_TextBox"
                                Style="{StaticResource WatermarkTextBoxSimple}"
                                ContextMenu="{TemplateBinding ContextMenu}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}"
                                FontStyle="{TemplateBinding FontStyle}"
                                FontWeight="{TemplateBinding FontWeight}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                IsTabStop="True"
                                MinWidth="20"
                                AcceptsReturn="False"
                                Margin="-2"
                                AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                TextWrapping="NoWrap"
                                TabIndex="{TemplateBinding TabIndex}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}">
                        </xctk:WatermarkTextBox>
                    </xctk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
    <xctk:BorderThicknessConverter x:Key="BorderThicknessConverter" />

    <LinearGradientBrush x:Key="PopupDarkBorderBrush"
                       EndPoint="0.5,1"
                       StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9" Offset="0" />
        <GradientStop Color="#FF8399A9"
                  Offset="0.375" />
        <GradientStop Color="#FF718597"
                  Offset="0.375" />
        <GradientStop Color="#FF617584"
                  Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PopupBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0"
                      Color="#FFffffff" />
                <GradientStop Offset="1"
                      Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="DateTimePickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <xctk:ButtonChrome x:Name="ToggleButtonChrome" Background="{StaticResource Dark}"
                                 CornerRadius="0,8,8,0" Margin="-6,0,0,0" BorderThickness="0,1,1,1" BorderBrush="{StaticResource Element}"
                                 RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                 RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                 RenderMouseOver="{TemplateBinding IsMouseOver}"
                                 RenderPressed="{TemplateBinding IsPressed}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </xctk:ButtonChrome>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =============================================================================== -->
    <!-- DateTimePicker                                                                  -->
    <!-- =============================================================================== -->

    <Style TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="{StaticResource Black}" />
        <Setter Property="BorderBrush" Value="{StaticResource Element}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource Light}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Margin" Value="5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MaxHeight" Value="30"/>
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="CalendarWidth" Value="178" />
        <Setter Property="ButtonSpinnerUpContentTemplate" Value="{StaticResource ButtonSpinnerSpinnerUpContentTemplateMain}" />
        <Setter Property="ButtonSpinnerDownContentTemplate" Value="{StaticResource ButtonSpinnerSpinnerDownContentTemplateMain}" />
        <!--<Setter Property="ButtonSpinnerUpDisabledContentTemplate" Value="{StaticResource IncreaseGlyphDisabledKey}" />
        <Setter Property="ButtonSpinnerDownDisabledContentTemplate" Value="{StaticResource DecreaseGlyphDisabledKey}" />-->
        <!--<Setter Property="DropDownButtonContent" Value="{StaticResource DropDownArrowGlyph}" />
        <Setter Property="DropDownButtonDisabledContent" Value="{StaticResource DropDownDisabledArrowGlyph}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner" IsTabStop="False" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                     SpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" SpinnerWidth="{TemplateBinding ButtonSpinnerWidth}"
                                     SpinnerHeight="{TemplateBinding ButtonSpinnerHeight}" SpinnerUpContentTemplate="{TemplateBinding ButtonSpinnerUpContentTemplate}"
                                     SpinnerDownContentTemplate="{TemplateBinding ButtonSpinnerDownContentTemplate}" SpinnerUpDisabledContentTemplate="{TemplateBinding ButtonSpinnerUpDisabledContentTemplate}"
                                     SpinnerDownDisabledContentTemplate="{TemplateBinding ButtonSpinnerDownDisabledContentTemplate}"
                                     HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" 
                                     AllowSpin="{TemplateBinding AllowSpin}" ShowSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <xctk:WatermarkTextBox x:Name="PART_TextBox"
                                          BorderThickness="0" Style="{StaticResource WatermarkTextBoxSimple}"
                                          Background="Transparent"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          Foreground="{TemplateBinding Foreground}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsTabStop="True"
                                          AutoSelectBehavior="OnFocus"
                                          MinWidth="20"
                                          AcceptsReturn="False"
                                          Padding="{TemplateBinding Padding}"
                                          TextAlignment="{TemplateBinding TextAlignment}"
                                          TextWrapping="NoWrap"
                                          Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                          TabIndex="{TemplateBinding TabIndex}"
                                          Watermark="{TemplateBinding Watermark}"
                                          WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                    Grid.Column="1" Panel.ZIndex="-1"
                                    Width="{Binding DropDownButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                    Height="{Binding DropDownButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                    Background="Black"
                                    Focusable="False"
                                    
                                    IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource DateTimePickerToggleButtonStyle}"
                                    IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                    IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                    Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Border VerticalAlignment="Center" MinHeight="16" MinWidth="40" HorizontalAlignment="Center">
                                        <Path Fill="{StaticResource Icon}" Width="14" Height="16" Stretch="Fill"  Data="M6.5 0a.5.5 0 0 0 0 1H7v1.07A7.001 7.001 0 0 0 8 16a7 7 0 0 0 5.29-11.584l.013-.012.354-.354.353.354a.5.5 0 1 0 .707-.707l-1.414-1.415a.5.5 0 1 0-.707.707l.354.354-.354.354-.012.012A6.97 6.97 0 0 0 9 2.071V1h.5a.5.5 0 0 0 0-1zm2 5.6V9a.5.5 0 0 1-.5.5H4.5a.5.5 0 0 1 0-1h3V5.6a.5.5 0 1 1 1 0"/>
                                    </Border>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" Placement="Right" AllowsTransparency="True" StaysOpen="False">
                                <!--<Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>-->
                                <Border BorderThickness="0" Background="{StaticResource Black}" CornerRadius="8" BorderBrush="{StaticResource Element}" Padding="3">
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" Style="{DynamicResource CalendarMain}" FontFamily="{StaticResource JetBrains}" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Calendar.Template>
                                                <ControlTemplate TargetType="{x:Type Calendar}">
                                                    <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource AncestorType={x:Type xctk:DateTimePicker}}}">
                                                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" />
                                                        </StackPanel>
                                                    </Viewbox>
                                                </ControlTemplate>
                                            </Calendar.Template>
                                        </Calendar>
                                        <xctk:TimePicker x:Name="PART_TimeUpDown"
                                      Background="{DynamicResource Black}"
                                      Foreground="{DynamicResource Light}"
                                      Format="{TemplateBinding TimeFormat}"
                                      FormatString="{TemplateBinding TimeFormatString}"
                                      Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                      Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                      Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                      Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                      IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                      AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                      Step="{TemplateBinding Step}"
                                      ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                      TimeListItemsStyle="{TemplateBinding TimePickerTimeListItemsStyle}"
                                      Watermark="{TemplateBinding TimeWatermark}"
                                      WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                      Visibility="{TemplateBinding TimePickerVisibility}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly"
                      Value="True"
                      TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                         Value="True">
                            <Setter Property="IsReadOnly"
                      Value="True"
                      TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter TargetName="_calendarToggleButton"
                      Property="Content"
                      Value="{Binding DropDownButtonDisabledContent, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowButtonSpinner"
                           Value="False" />
                                <Condition Property="ShowDropDownButton"
                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness"
                      Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BorderThicknessConverter}}"
                      TargetName="PART_Spinner" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>